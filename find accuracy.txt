import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from matplotlib import pyplot as plt
import seaborn as sb

data=pd.read_csv(r"C:\DataSets-master\DataSets-master\Social_Network_Ads.csv")

data

X_feature=data.iloc[:,1:4]
Y_target=data.iloc[:,4]

X_feature["Gender"]=X_feature.Gender.map({"Male":0,"Female":1})

from sklearn.model_selection import train_test_split

Xtrain,Xtest,Ytrain,Ytest=train_test_split(X_feature,Y_target,test_size=.30,random_state=101)

print("Sample in X_train {} and Ytrain {}".format(len(Xtrain),len(Ytrain)))
print("Sample in X_test {} and Ytest {}".format(len(Xtest),len(Ytest)))

k=int(np.sqrt(len(Xtrain)))+1
k_range=range(1,k)
from sklearn.metrics import accuracy_score

acc_list=[]
for i in k_range:
    knn_model=KNeighborsClassifier(n_neighbors=i)
    knn_model=knn_model.fit(Xtrain,Ytrain)
    Yp=knn_model.predict(Xtest)
    knn_acc=accuracy_score(Yp,Ytest)
    acc_list.append(knn_acc)
    print("Accuracy is {} at k={}".format(knn_acc,i))

plt.plot(k_range,acc_list,'b+')
plt.plot(k_range,acc_list,'r*-')
plt.xlabel("k...>")
plt.ylabel("Accuracy score")
plt.show()

XX_feature=X_feature

from sklearn.preprocessing import StandardScaler, MinMaxScaler

minMaxScaler=MinMaxScaler()
stdScaler=StandardScaler()

XX_scaleFeature=minMaxScaler.fit_transform(XX_feature)

XX_Std_scaleFeature=stdScaler.fit_transform(XX_feature)

round(XX_Std_scaleFeature.mean())

round(XX_Std_scaleFeature.std())

Xstrain,Xstest,Ystrain,Ystest=train_test_split(XX_scaleFeature,Y_target,test_size=.30,random_state=101)

acc_list_sc=[]
for i in k_range:
    knn_model_sc=KNeighborsClassifier(n_neighbors=i)
    knn_model_sc=knn_model_sc.fit(Xstrain,Ystrain)
    Yp=knn_model_sc.predict(Xstest)
    knn_acc=accuracy_score(Yp,Ystest)
    acc_list_sc.append(knn_acc)
   # print("Accuracy is {} at k={}".format(knn_acc,i))

plt.plot(k_range,acc_list_sc,'b+')
plt.plot(k_range,acc_list_sc,'r*-')
plt.xlabel("k...>")
plt.ylabel("Accuracy score")
plt.show()

